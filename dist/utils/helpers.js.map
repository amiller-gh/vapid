{"version":3,"file":"helpers.js","sourceRoot":"","sources":["../../lib/utils/helpers.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,uCAAyB;AACzB,8CAAsB;AACtB,+BAA8C;AAC9C,+CAAiC;AAEjC;;GAEG;AACH,MAAM,KAAK,GAAG;IAEZ;;;;;;;OAOG;IACH,QAAQ,CAAC,IAAY,EAAE,EAAU,EAAE,IAAI,GAAG,EAAE;QAC1C,2DAA2D;QAC3D,IAAI,OAAO,GAAG,EAAE,CAAC,YAAY,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QAC7C,IAAI,MAAM,GAAG,EAAE,CAAC;QAEhB,MAAM,CAAC,IAAI,CAAC,cAAO,CAAC,EAAE,CAAC,CAAC,CAAC;QAEzB,IAAI,cAAO,CAAC,IAAI,CAAC,KAAK,MAAM,EAAE;YAC5B,MAAM,GAAG,EAAE,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;YAClC,OAAO,GAAG,aAAG,CAAC,MAAM,CAAC,OAAO,EAAE,IAAI,EAAE,EAAE,KAAK,EAAE,KAAK,EAAE,CAAW,CAAC;SACjE;QAED,EAAE,CAAC,aAAa,CAAC,MAAM,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;IAC7C,CAAC;IAED;;;;;;;OAOG;IACH,SAAS,CAAC,IAAY,EAAE,EAAU,EAAE,IAAI,GAAG,EAAE;QAC3C,MAAM,WAAW,GAAG,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAEzC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAEhB,WAAW,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;YAC3B,MAAM,MAAM,GAAG,GAAG,EAAE,IAAI,IAAI,EAAE,CAAC;YAC/B,MAAM,QAAQ,GAAG,GAAG,IAAI,IAAI,IAAI,EAAE,CAAC;YACnC,MAAM,KAAK,GAAG,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;YAEpC,IAAI,KAAK,CAAC,MAAM,EAAE,EAAE;gBAClB,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;aACvC;iBAAM,IAAI,KAAK,CAAC,WAAW,EAAE,EAAE;gBAC9B,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;aACxC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;;OAIG;IACH,WAAW,CAAC,IAAY;QACtB,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;YACpC,MAAM,QAAQ,GAAG,WAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;YAElC,IAAI,EAAE,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,WAAW,EAAE,EAAE;gBACxC,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;aAC5B;iBAAM;gBACL,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;aACzB;QACH,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;IACrB,CAAC;CACF,CAAC;AAEF,kBAAe,KAAK,CAAC","sourcesContent":["import * as fs from 'fs';\nimport ejs from 'ejs';\nimport { extname, join, dirname } from 'path';\nimport * as mkdirp from 'mkdirp';\n\n/**\n * Helper functions, mostly an extension of Lodash\n */\nconst Utils = {\n\n  /**\n   * Copy a single file\n   * and render variables via EJS\n   *\n   * @param {string} from - the originating path, where to copy from\n   * @param {string} to - the destination path, where to copy to\n   * @param {Object} data - replacement data for EJS render\n   */\n  copyFile(from: string, to: string, data = {}) {\n    // TODO: Should be smarter about how it determines encoding\n    let content = fs.readFileSync(from, 'utf-8');\n    let toPath = to;\n\n    mkdirp.sync(dirname(to));\n\n    if (extname(from) === '.ejs') {\n      toPath = to.replace(/\\.ejs$/, '');\n      content = ejs.render(content, data, { async: false }) as string;\n    }\n\n    fs.writeFileSync(toPath, content, 'utf-8');\n  },\n\n  /**\n   * Recursively copy files from one directory to another,\n   * and render variables via EJS\n   *\n   * @param {string} from - the originating path, where to copy from\n   * @param {string} to - the destination path, where to copy to\n   * @param {Object} data - replacement data for EJS render\n   */\n  copyFiles(from: string, to: string, data = {}) {\n    const filesToCopy = fs.readdirSync(from);\n\n    mkdirp.sync(to);\n\n    filesToCopy.forEach((file) => {\n      const toPath = `${to}/${file}`;\n      const fromPath = `${from}/${file}`;\n      const stats = fs.statSync(fromPath);\n\n      if (stats.isFile()) {\n        this.copyFile(fromPath, toPath, data);\n      } else if (stats.isDirectory()) {\n        this.copyFiles(fromPath, toPath, data);\n      }\n    });\n  },\n\n  /**\n   * Recursively remove a path\n   *\n   * @param {string} path\n   */\n  removeFiles(path: string) {\n    fs.readdirSync(path).forEach((file) => {\n      const filePath = join(path, file);\n\n      if (fs.lstatSync(filePath).isDirectory()) {\n        this.removeFiles(filePath);\n      } else {\n        fs.unlinkSync(filePath);\n      }\n    });\n\n    fs.rmdirSync(path);\n  },\n};\n\nexport default Utils;"]}