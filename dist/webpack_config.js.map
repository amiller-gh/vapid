{"version":3,"file":"webpack_config.js","sourceRoot":"","sources":["../lib/webpack_config.ts"],"names":[],"mappings":"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","sourcesContent":["import { GlobSync } from 'glob';\nimport { relative, resolve } from 'path';\nimport sass from 'sass';\nimport MiniCssExtractPlugin from 'mini-css-extract-plugin';\n\n/**\n * Generates entry object by scanning directories\n * for *.pack.scss, *.pack.sass, and *.pack.js files\n *\n * @param {array} dirs\n * @return {Object} entry object\n */\nfunction _entry(dirs: string[] = []): Record<string, any> {\n  return dirs.reduce((memo, dir) => {\n    const packs = new GlobSync(resolve(dir, '**/*.pack.+(s[ac]ss|js)'));\n    packs.found.forEach((pack) => {\n      const key = relative(dir, pack).replace(/\\.pack\\.[^/.]+$/, '');\n      /* eslint-disable-next-line no-param-reassign */\n      memo[key] = [pack];\n    });\n\n    return memo;\n  }, {});\n}\n\n/**\n * Scans entries for Sass files, and excludes the associated .js garbage files\n *\n * @param {Object} entry\n * @return {array} list of files to remove from the final output\n */\nfunction _removeFiles(entry: Record<string, any>) {\n  return Object.entries(entry).reduce<string[]>((memo, [key, value]) => {\n    if (value[0].match(/\\.pack\\.s[ac]ss/)) {\n      memo.push(`${key}.js`);\n      memo.push(`${key}.js.map`);\n    }\n    return memo;\n  }, []);\n}\n\n/**\n * Removes files after Webpack compilation\n * Primarily used to remove superfluous JS files created during Sass compilation\n */\nfunction RemoveFilesPlugin(this: any, options: { files?: string[] } = {}) {\n  this.files = new Set(options.files || []);\n}\n\nRemoveFilesPlugin.prototype.apply = function apply(compiler: any) {\n  compiler.hooks.emit.tap(this.constructor.name, (compilation: any) => {\n    for (const file of Object.keys(compilation.assets)) {\n      if (!this.files.has(file)) { continue; }\n      /* eslint-disable-next-line no-param-reassign */\n      delete compilation.assets[file];\n    }\n  });\n};\n\n/**\n * Dynamic config for Webpack\n *\n * @param {string} options\n * @return {Object} Webpack configuration\n */\nexport default function config(mode = 'production', assets: string[] = [], modules: string[] = [], outputDir = false) {\n  // Ensure array inputs are actually arrays.\n  const moduleDirs: string[] = Array.isArray(modules) ? modules : [modules];\n  const assetDirs: string[] = Array.isArray(assets) ? assets : [assets];\n\n  const context = resolve(__dirname, '..', 'node_modules');\n  const entry = _entry(assetDirs);\n  const output = outputDir ? { filename: '[name].js', path: '.' } : {};\n  const removeFiles = _removeFiles(entry);\n  const resolveModules = [context, ...moduleDirs];\n  const devtool = mode === 'development' ? 'source-map' : false;\n\n  return {\n    mode,\n    context,\n    entry,\n    output,\n    devtool,\n    target: 'web',\n    module: {\n      rules: [\n        {\n          test: /\\.s[ac]ss$/,\n          use: [\n            { loader: MiniCssExtractPlugin.loader },\n            { loader: 'css-loader', options: { url: false, sourceMap: true } },\n            { loader: 'sass-loader', options: { implementation: sass, sourceMap: true } },\n            { loader: 'resolve-url-loader' },\n          ],\n        },\n      ],\n    },\n\n    plugins: [\n      new MiniCssExtractPlugin({\n        filename: '[name].css',\n      }),\n      // @ts-ignore\n      new RemoveFilesPlugin({\n        files: removeFiles,\n      }),\n    ],\n\n    resolve: {\n      modules: resolveModules,\n    },\n  };\n}\n"]}