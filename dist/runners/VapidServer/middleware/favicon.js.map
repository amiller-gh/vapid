{"version":3,"file":"favicon.js","sourceRoot":"","sources":["../../../../lib/runners/VapidServer/middleware/favicon.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,uCAAwB;AAExB,+BAA4B;AAE5B,MAAM,YAAY,GAAG,cAAc,CAAC;AAEpC;;;;;;GAMG;AACH,SAAS,SAAS,CAAC,IAAY,EAAE,QAAkB,EAAE;IACnD,KAAK,MAAM,CAAC,IAAI,KAAK,EAAE;QACrB,MAAM,QAAQ,GAAG,WAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;QAC/B,IAAI,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE;YAAE,OAAO,QAAQ,CAAC;SAAE;KAClD;IACD,OAAO,KAAK,CAAC;AACf,CAAC;AAED;;;;;;GAMG;AACH,SAAwB,OAAO,CAAC,QAAkB,EAAE,EAAE,UAAqC,EAAE,MAAM,EAAE,WAAW,EAAE;IAChH,MAAM,MAAM,GAAG,OAAO,CAAC,MAAM,KAAK,IAAI;QACpC,CAAC,CAAC,QAAQ;QACV,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,OAAO,CAAC,MAAM,CAAC,EAAE,WAAW,CAAC,CAAC;IACvD,MAAM,YAAY,GAAG,mBAAmB,MAAM,GAAG,IAAI,GAAG,CAAC,EAAE,CAAC,CAAC,iCAAiC;IAE9F,OAAO,CAAC,GAAgB,EAAE,IAAc,EAAE,EAAE;QAC1C,IAAI,GAAG,CAAC,IAAI,KAAK,YAAY,EAAE;YAC7B,OAAO,IAAI,EAAE,CAAC;SACf;QAED,IAAI,GAAG,CAAC,MAAM,KAAK,KAAK,IAAI,GAAG,CAAC,MAAM,KAAK,MAAM,EAAE;YACjD,GAAG,CAAC,MAAM,GAAG,GAAG,CAAC,MAAM,KAAK,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;YAClD,GAAG,CAAC,GAAG,CAAC,OAAO,EAAE,oBAAoB,CAAC,CAAC;SACxC;aAAM;YACL,MAAM,QAAQ,GAAG,SAAS,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;YAChD,GAAG,CAAC,GAAG,CAAC,eAAe,EAAE,YAAY,CAAC,CAAC;YACvC,GAAG,CAAC,IAAI,GAAG,cAAc,CAAC;YAC1B,GAAG,CAAC,IAAI,GAAG,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;SACtD;QAED,OAAO,IAAI,CAAC;IACd,CAAC,CAAC;AACJ,CAAC;AAvBD,0BAuBC;AAAA,CAAC","sourcesContent":["import * as fs from 'fs'\nimport Koa from 'koa';\nimport { join } from 'path';\n\nconst FAVICON_PATH = '/favicon.ico';\n\n/**\n * Returns the first matching file found in the supplied paths, if any.\n *\n * @param {string} name\n * @param {array} [paths=[]]\n * @return {string|false}\n */\nfunction findFirst(name: string, paths: string[] = []) {\n  for (const p of paths) {\n    const filePath = join(p, name);\n    if (fs.existsSync(filePath)) { return filePath; }\n  }\n  return false;\n}\n\n/**\n * Serves the first favicon found in the supplied paths\n *\n * @param {array} [paths=[]]\n * @parms {Object} options\n * @return {function|boolean}\n */\nexport default function favicon(paths: string[] = [], options: { maxAge: number | null } = { maxAge: 31556926000 }) {\n  const maxAge = options.maxAge === null\n    ? 86400000\n    : Math.min(Math.max(0, options.maxAge), 31556926000);\n  const cacheControl = `public, max-age=${maxAge / 1000 | 0}`; // eslint-disable-line no-bitwise\n\n  return (ctx: Koa.Context, next: () => {}) => {\n    if (ctx.path !== FAVICON_PATH) {\n      return next();\n    }\n\n    if (ctx.method !== 'GET' && ctx.method !== 'HEAD') {\n      ctx.status = ctx.method === 'OPTIONS' ? 200 : 405;\n      ctx.set('Allow', 'GET, HEAD, OPTIONS');\n    } else {\n      const filePath = findFirst(FAVICON_PATH, paths);\n      ctx.set('Cache-Control', cacheControl);\n      ctx.type = 'image/x-icon';\n      ctx.body = filePath ? fs.readFileSync(filePath) : '';\n    }\n\n    return true;\n  };\n};\n"]}