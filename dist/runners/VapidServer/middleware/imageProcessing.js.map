{"version":3,"file":"imageProcessing.js","sourceRoot":"","sources":["../../../../lib/runners/VapidServer/middleware/imageProcessing.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,+CAAiC;AACjC,2BAKY;AAEZ,+BAAqC;AAErC,MAAM,gBAAgB,GAAG;IACvB,MAAM,EAAE,CAAC;IACT,OAAO,EAAE,CAAC;IACV,MAAM,EAAE,CAAC;IACT,OAAO,EAAE,CAAC;CACX,CAAC;AAEF;;;;;GAKG;AACH,SAAwB,eAAe,CAAC,KAAkD;IACxF,OAAO,CAAO,GAAgB,EAAE,IAAgB,EAAE,EAAE;QAClD,MAAM,GAAG,GAAG,cAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,WAAW,EAAE,CAAC;QAC5C,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,GAAG,CAAC,KAAK,CAAC;QAE3B,IACE,CAAC,gBAAgB,CAAC,GAAG,CAAC;YACtB,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;YACT,OAAO,IAAI,EAAE,CAAC;QAEhB,MAAM,QAAQ,GAAG,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC;YAChD,WAAI,CAAC,KAAK,CAAC,IAAI,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;YAC5B,WAAI,CAAC,KAAK,CAAC,GAAG,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC;QAC5B,MAAM,SAAS,GAAG,aAAQ,CAAC,QAAQ,CAAC,CAAC;QACrC,MAAM,QAAQ,GAAG,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC;aACtC,MAAM,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,SAAS,CAAC,KAAK,EAAE,CAAC;aACtC,MAAM,CAAC,KAAK,CAAC,CAAC;QACjB,MAAM,SAAS,GAAG,WAAI,CAAC,KAAK,CAAC,KAAK,EAAE,GAAG,QAAQ,GAAG,GAAG,EAAE,CAAC,CAAC;QACzD,MAAM,WAAW,GAAG,eAAU,CAAC,SAAS,CAAC,CAAC;QAE1C,GAAG,CAAC,GAAG,CAAC,gBAAgB,EAAE,GAAG,SAAS,CAAC,IAAI,EAAE,CAAC,CAAC;QAC/C,GAAG,CAAC,IAAI,GAAG,GAAG,CAAC;QAEf,GAAG,CAAC,IAAI,GAAG,MAAM,CAAC,GAAS,EAAE;YAC3B,IAAI,WAAW,EAAE;gBACf,OAAO,iBAAY,CAAC,SAAS,CAAC,CAAC;aAChC;YAED,MAAM,MAAM,GAAG,iBAAY,CAAC,QAAQ,CAAC,CAAC;YACtC,kBAAa,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;YAEjC,OAAO,MAAM,CAAC;QAChB,CAAC,CAAA,CAAC,EAAE,CAAC;QAEL,OAAO,IAAI,CAAC;IACd,CAAC,CAAA,CAAC;AACJ,CAAC;AApCD,kCAoCC;AAAA,CAAC","sourcesContent":["import Koa from 'koa';\nimport * as crypto from 'crypto';\nimport {\n  existsSync,\n  readFileSync,\n  statSync,\n  writeFileSync,\n} from 'fs';\n\nimport { extname, join } from 'path';\n\nconst ACCEPTED_FORMATS = {\n  '.jpg': 1,\n  '.jpeg': 1,\n  '.png': 1,\n  '.webp': 1,\n};\n\n/**\n * Resize and crop images\n *\n * @params {Object} paths\n * @return {function}\n */\nexport default function imageProcessing(paths: { data: string; www: string; cache: string}) {\n  return async (ctx: Koa.Context, next: () => void) => {\n    const ext = extname(ctx.path).toLowerCase();\n    const { w, h } = ctx.query;\n\n    if (\n      !ACCEPTED_FORMATS[ext] ||\n      !(w || h)\n    ) return next();\n\n    const filePath = ctx.path.startsWith('/uploads') ?\n      join(paths.data, ctx.path) :\n      join(paths.www, ctx.path);\n    const fileStats = statSync(filePath);\n    const cacheKey = crypto.createHash('md5')\n      .update(`${ctx.url}${fileStats.mtime}`)\n      .digest('hex');\n    const cachePath = join(paths.cache, `${cacheKey}${ext}`);\n    const cacheExists = existsSync(cachePath);\n\n    ctx.set('Content-Length', `${fileStats.size}`);\n    ctx.type = ext;\n\n    ctx.body = await (async () => {\n      if (cacheExists) {\n        return readFileSync(cachePath);\n      }\n\n      const buffer = readFileSync(filePath);\n      writeFileSync(cachePath, buffer);\n\n      return buffer;\n    })();\n\n    return true;\n  };\n};\n"]}