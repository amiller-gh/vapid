{"version":3,"file":"watcher.js","sourceRoot":"","sources":["../../../lib/runners/VapidServer/watcher.ts"],"names":[],"mappings":";;;;;AAAA,4DAAoC;AACpC,+BAA+B;AAC/B,uCAAqC;AAErC,MAAM,MAAM,GAAG,YAAY,CAAC;AAE5B;;;;;;;;;GASG;AACH,MAAqB,OAAO;IAM1B;;;OAGG;IACH,YAAY,QAA2B,EAAE;QAPzC,WAAM,GAAsD,IAAI,CAAC;QACjE,aAAQ,GAAwB,IAAI,CAAC;QAOnC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;IACtD,CAAC;IAED;;OAEG;IACH,WAAW,CAAC,QAAgB;QAC1B,sBAAsB;QACtB,IAAI,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC;YAAE,OAAO;QAEnC,IAAI,cAAO,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE;YACnC,UAAU,CAAC,GAAG,EAAE;gBACd,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;gBACjC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YACzB,CAAC,CAAC,CAAC;YACH,OAAO;SACR;QAED,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;QACjC,cAAM,CAAC,IAAI,CAAC,eAAe,QAAQ,EAAE,CAAC,CAAC;IACzC,CAAC;IAED;;;;;OAKG;IACH,MAAM,CAAC,MAAW,EAAE,QAAQ,GAAG,GAAG,EAAE,GAAE,CAAC;QACrC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,MAAM,GAAG,oBAAU,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;QAE9C,IAAI,CAAC,MAAM,CAAC,UAAU;YAAE,OAAO;QAE/B,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC9B,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QACnD,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,QAAQ,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QACtD,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,QAAQ,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAEtD,cAAM,CAAC,IAAI,CAAC,2BAA2B,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;IACvD,CAAC;IAED;;OAEG;IACH,KAAK;QACH,IAAI,IAAI,CAAC,MAAM;YAAE,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;IACvC,CAAC;IAED;;;;OAIG;IACH,OAAO,CAAC,QAAQ,GAAG,GAAG;QACpB,IAAI,CAAC,IAAI,CAAC,MAAM;YAAE,OAAO;QACzB,MAAM,WAAW,GAAG,QAAQ,CAAC,OAAO,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QACrD,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;QACjC,cAAM,CAAC,IAAI,CAAC,eAAe,QAAQ,EAAE,CAAC,CAAC;IACzC,CAAC;IAED;;;;OAIG;IACH,SAAS,CAAC,IAAI,GAAG,EAAE;;QACjB,MAAA,IAAI,CAAC,MAAM,0CAAE,cAAc,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;IACpD,CAAC;CACF;AAhFD,0BAgFC","sourcesContent":["import livereload from 'livereload';\nimport { extname } from 'path';\nimport { Logger } from '../../utils';\n\nconst reSass = /\\.s[ac]ss$/;\n\n/**\n * Watches filesystem for changes,\n * and WebSocket LiveReload\n *\n * @example\n * let watcher = new Watcher('path/to/watch')\n *\n * @example\n * let watcher = new Watcher(['path/to/watch', 'another/path'])\n */\nexport default class Watcher {\n\n  paths: string[];\n  server: ReturnType<typeof livereload.createServer> | null = null;\n  callback: (() => void) | null = null;\n\n  /**\n   * @param {string|array} [paths=[]] - one or more paths to watch\n   * @return {Watcher}\n   */\n  constructor(paths: string | string[] = []) {\n    this.paths = Array.isArray(paths) ? paths : [paths];\n  }\n\n  /**\n   * Called whenever files are added, changed, or deleted\n   */\n  handleEvent(filePath: string) {\n    // Ignore hidden files\n    if (/^\\..*/.test(filePath)) return;\n\n    if (extname(filePath).match(reSass)) {\n      setTimeout(() => {\n        this.callback && this.callback();\n        this.refresh(filePath);\n      });\n      return;\n    }\n\n    this.callback && this.callback();\n    Logger.info(`LiveReload: ${filePath}`);\n  }\n\n  /**\n   * Starts the file watcher and WebSocket server\n   *\n   * @param {{server: Server, port: number, liveReload: boolean}} config\n   * @param {function} [callback=() => {}] - function to execute when files are changed\n   */\n  listen(config: any, callback = () => {}) {\n    this.callback = callback;\n    this.server = livereload.createServer(config);\n\n    if (!config.liveReload) return;\n\n    this.server.watch(this.paths);\n    this.server.on('add', this.handleEvent.bind(this));\n    this.server.on('change', this.handleEvent.bind(this));\n    this.server.on('unlink', this.handleEvent.bind(this));\n\n    Logger.info(`Watching for changes in ${this.paths}`);\n  }\n\n  /**\n   * Safely shuts down the server\n   */\n  close() {\n    if (this.server) this.server.close();\n  }\n\n  /**\n   * Broadcasts reload-all command to WebSocket clients\n   *\n   * @param {string} [filePath=*] - path to refresh\n   */\n  refresh(filePath = '*') {\n    if (!this.server) return;\n    const refreshPath = filePath.replace(reSass, '.css');\n    this.server.refresh(refreshPath);\n    Logger.info(`LiveReload: ${filePath}`);\n  }\n\n  /**\n   * Broadcasts data to all WebSocket clients\n   *\n   * @param {Object} [data={}]\n   */\n  broadcast(data = {}) {\n    this.server?.sendAllClients(JSON.stringify(data));\n  }\n}\n"]}