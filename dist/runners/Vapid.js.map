{"version":3,"file":"Vapid.js","sourceRoot":"","sources":["../../lib/runners/Vapid.ts"],"names":[],"mappings":"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","sourcesContent":["import * as path from 'path';\nimport * as mkdirp from 'mkdirp';\n\nimport dotenv from 'dotenv';\n\nimport Database from '../Database';\n// import Generator from '../generator';\nimport { IProvider, MemoryProvider } from '../Database/providers';\n\ndeclare global {\n  /* eslint-disable-next-line @typescript-eslint/no-namespace */\n  namespace NodeJS {\n    interface ProcessEnv {\n      NODE_ENV: 'development' | 'production' | 'test';\n      TEMPLATES_PATH: string;\n      PORT: string;\n    }\n  }\n}\n\ninterface VapidProjectPaths {\n  pjson: string;\n  root: string;\n  data: string;\n  cache: string;\n  uploads: string;\n  www: string;\n  modules: string;\n}\n\nexport interface VapidSettings {\n  cache: boolean;\n  database: {\n    dialect: 'memory' | 'sqlite' | 'firebase';\n    logging: false;\n  };\n  dataPath: string;\n  liveReload: boolean;\n  placeholders: boolean;\n  port: number;\n}\n\n/**\n * Resolves commonly-used project paths\n */\nexport function getProjectPaths(cwd: string, dataPath: string): VapidProjectPaths {\n  const paths: VapidProjectPaths = {\n    pjson: path.resolve(cwd, 'package.json'),\n    root: path.resolve(cwd, '.'),\n    data: path.resolve(cwd, dataPath),\n    cache: path.resolve(cwd, path.join(dataPath, 'cache')),\n    uploads: path.resolve(cwd, path.join(dataPath, 'uploads')),\n    www: path.resolve(cwd, './www'),\n    modules: path.resolve(cwd, './node_modules'),\n  };\n\n  // Ensure paths exist\n  mkdirp.sync(paths.uploads);\n  mkdirp.sync(paths.www);\n\n  return paths;\n};\n\n/**\n * This is the main class that powers Vapid projects.\n * It fetches projected environment variables, configuration options,\n * project paths and data storage information. Project runners, like\n * `VapidBuilder` or `VapidServer`, may extend this base class to easily\n * access project configuration and structure data.\n */\nexport default class Vapid {\n\n  name: string;\n  env: 'production' | 'development' | 'test';\n  isDev: boolean;\n  domain: string;\n  prodUrl: string;\n  paths: VapidProjectPaths;\n  provider: IProvider;\n  database: Database;\n  config: VapidSettings = {\n    cache: process.env.NODE_ENV === 'production',\n    database: {\n      dialect: 'sqlite',\n      logging: false,\n    },\n    dataPath: './data',\n    liveReload: process.env.NODE_ENV !== 'production',\n    placeholders: process.env.NODE_ENV !== 'production',\n    port: parseInt(process.env.PORT, 10) || 3000,\n  }\n\n  /**\n   * This module works in conjunction with a site directory.\n   */\n  constructor(cwd: string) {\n    // User-defined options\n    /* eslint-disable-next-line import/no-dynamic-require, global-require */\n    const { vapid: options = {}, name, homepage } = require(path.resolve(cwd, 'package.json'));\n\n    dotenv.config({ path: path.resolve(cwd, '.env') });\n\n    this.name = options.name || name;\n    this.env = process.env.NODE_ENV || 'development';\n    this.isDev = (this.env === 'development' || this.env === 'test');\n    this.config = Object.assign({}, this.config, options);\n    this.domain = this.isDev ? `localhost:${this.config.port}` : (options.domain || homepage);\n    this.prodUrl = options.domain || homepage;\n    this.paths = getProjectPaths(cwd, this.config.dataPath);\n\n    // Initialize database.\n    // const dbConfig = this.config.database;\n    // if (dbConfig.dialect === 'sqlite') {\n    //   dbConfig.storage = path.resolve(this.paths.data, 'vapid.sqlite');\n    // }\n    this.provider = new MemoryProvider({});\n    this.database = new Database(this.provider);\n  }\n}\n"]}