{"version":3,"file":"index.js","sourceRoot":"","sources":["../../lib/TemplateCompiler/index.ts"],"names":[],"mappings":"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","sourcesContent":["\nimport { readFileSync } from 'fs';\nimport { basename, dirname } from 'path';\n\nimport { PageType } from '../Database/models/Template';\nimport {\n  NeutrinoHelper,\n  CollectionHelper,\n  IfHelper,\n  UnlessHelper,\n  CollateHelper,\n  EachHelper,\n  EqHelper,\n  MathHelper,\n  LinkHelper,\n  ImageHelper,\n  DateHelper,\n } from './helpers';\n import { ComponentResolver, DATA_SYMBOL, IParsedTemplate, GlimmerTemplate } from './types';\n import { render } from './renderer';\n import { parse } from './parser';\n\n/**\n * TemplateCompiler class\n * Used in conjunction with a modified version of Mustache.js (Goatee)\n */\n export class TemplateCompiler {\n\n  private helpers: Record<string, NeutrinoHelper> = {};\n  private resolveComponent: ComponentResolver;\n\n  static get DATA_SYMBOL() { return DATA_SYMBOL; }\n\n  /**\n   * @param {object} partials â€“ The partials to make available in this project.\n   * @param {array} helpers - Additional helpers to make available in this project.\n   */\n  constructor(resolveComponent: ComponentResolver = () => '', helpers: Record<string, NeutrinoHelper> = {}) {\n    this.resolveComponent = resolveComponent;\n\n    // Register native helpers\n    this.registerHelper('collection', CollectionHelper);\n    this.registerHelper('if', IfHelper);\n    this.registerHelper('unless', UnlessHelper);\n    this.registerHelper('collate', CollateHelper);\n    this.registerHelper('each', EachHelper);\n    this.registerHelper('eq', EqHelper);\n    this.registerHelper('math', MathHelper);\n    this.registerHelper('link', LinkHelper);\n    this.registerHelper('image', ImageHelper);\n    this.registerHelper('date', DateHelper);\n\n    // Register 3rd party helpers\n    for (const [name, helper] of Object.entries(helpers)) {\n      this.registerHelper(name, helper);\n    }\n  }\n\n  // Wrap all helpers so we unwrap function values and SafeStrings\n  registerHelper(name: string, helper: NeutrinoHelper) {\n    this.helpers[name] = helper;\n  }\n\n\n  /**\n   * Applies content to the template\n   *\n   * @param {Object} content\n   * @return {string} - HTML that has tags replaced with content\n   */\n  parseFile(filePath: string): IParsedTemplate {\n    const html = readFileSync(filePath, 'utf8');\n    const name = basename(filePath, '.html');\n    let type: PageType = PageType.PAGE;\n    if (dirname(filePath).endsWith('collections')) {\n      type = PageType.COLLECTION;\n    } else if (dirname(filePath).endsWith('components') || name.startsWith('_')) {\n      type = PageType.COMPONENT;\n    }\n\n    return parse(name, type, html, this.resolveComponent, this.helpers);\n  }\n\n\n  /**\n   * Applies content to the template\n   *\n   * @param {Object} content\n   * @return {string} - HTML that has tags replaced with content\n   */\n  renderFile(filePath: string, content = {}, data = {}) {\n    const { name, type, ast } = this.parseFile(filePath);\n    return render(name, type, ast, this.resolveComponent, this.helpers, content, data);\n  }\n\n  render(name: string, type: PageType, ast: GlimmerTemplate | string, content = {}, data = {}) {\n    return render(name, type, ast, this.resolveComponent, this.helpers, content, data)\n  }\n\n}\n"]}