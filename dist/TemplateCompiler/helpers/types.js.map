{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../lib/TemplateCompiler/helpers/types.ts"],"names":[],"mappings":";;;AAiCA,MAAa,UAAU;IAErB,YAAY,GAAW;QACrB,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;IACjB,CAAC;IACD,QAAQ;QACN,OAAO,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC;IACvB,CAAC;CACF;AARD,gCAQC","sourcesContent":["import { PageType } from '../../Database/models/Template';\nimport { ASTv1 } from '@glimmer/syntax';\nimport { SimpleDocumentFragment } from '@simple-dom/interface';\n\nexport type BlockNodes =\n    ASTv1.MustacheStatement\n  | ASTv1.BlockStatement\n  | ASTv1.PartialStatement\n  | ASTv1.SubExpression;\n\nexport interface NeutrinoHelperOptions {\n  block?: (blockParams?: any[], data?: Record<string, any>) => SimpleDocumentFragment;\n  inverse?: (blockParams?: any[], data?: Record<string, any>) => SimpleDocumentFragment;\n}\n\nexport interface NeutrinoHelper {\n  isField: boolean;\n  isBranch: false | PageType;\n  run(params: any[], hash: Record<string, any>, options: NeutrinoHelperOptions): string | SimpleDocumentFragment | void;\n  getType(expr: ParsedExpr): string | null;\n}\n\nexport interface ParsedExpr {\n  original: string;\n  key: string;\n  context: string;\n  path: string;\n  parts: string[];\n  hash: Record<string, any>;\n  isPrivate: boolean;\n  type: string;\n}\n\nexport class SafeString {\n  private str: string;\n  constructor(str: string) {\n    this.str = str;\n  }\n  toString(): string {\n    return '' + this.str;\n  }\n}"]}