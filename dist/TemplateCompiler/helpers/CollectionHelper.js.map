{"version":3,"file":"CollectionHelper.js","sourceRoot":"","sources":["../../../lib/TemplateCompiler/helpers/CollectionHelper.ts"],"names":[],"mappings":";;AAEA,4CAA2C;AAG3C,MAAM,gBAAgB,GAAmB;IACvC,OAAO,EAAE,KAAK;IACd,QAAQ,+BAAqB;IAE7B,OAAO,KAAK,OAAO,YAAY,CAAC,CAAC,CAAC;IAElC,GAAG,CAAC,IAAI,EAAE,OAAO;QACf,MAAM,KAAK,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;QACpE,MAAM,KAAK,GAAG,CAAC,OAAO,CAAC,IAAI,IAAI,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,QAAQ,CAAC;QAE/D,0FAA0F;QAC1F,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,IAAI,OAAO,CAAC,OAAO;YAAE,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;QAE9E,+BAA+B;QAC/B,IAAI,GAAG,GAAG,EAAE,CAAC;QACb,IAAI,KAAK,GAAG,CAAC,CAAC;QAEd,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;YACxB,IAAI,KAAK,IAAI,KAAK,EAAE;gBAAE,MAAM;aAAE;YAC9B,GAAG,IAAI,OAAO,CAAC,EAAE,CAAC,IAAI,EAAE;gBACtB,IAAI,EAAE;oBACJ,KAAK;oBACL,MAAM,EAAE,KAAK,CAAC,MAAM;oBACpB,KAAK,EAAE,KAAK,KAAK,CAAC;oBAClB,IAAI,EAAE,KAAK,KAAK,KAAK,CAAC,MAAM,GAAG,CAAC;oBAChC,IAAI,EAAE,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC;oBACtB,IAAI,EAAE,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC;oBACtB,MAAM,EAAE,IAAI,CAAC,uBAAW,CAAC;iBAC1B;gBACD,WAAW,EAAE,CAAC,IAAI,CAAC;aACpB,CAAC,CAAC;YACH,KAAK,IAAI,CAAC,CAAC;SACZ;QACD,OAAO,GAAG,CAAC;IACb,CAAC;IAED,UAAU,CAAC,GAAG,EAAE,IAAI;QAClB,IAAI,GAAG,GAAG,CAAC,EAAE;YAAE,OAAO,SAAS,CAAC;SAAE;QAClC,OAAO;YACL,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ;YAC7B,IAAI,+BAAqB;YACzB,SAAS,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI;SACjC,CAAC;IACJ,CAAC;CACF,CAAC;AAEF,kBAAe,gBAAgB,CAAC","sourcesContent":["import { NeutrinoHelper } from './types';\n\nimport { DATA_SYMBOL } from '../constants';\nimport { PageType } from '../../Database/models';\n\nconst CollectionHelper: NeutrinoHelper = {\n  isField: false,\n  isBranch: PageType.COLLECTION,\n\n  getType() { return 'collection'; },\n\n  run(data, options) {\n    const items = (Array.isArray(data) ? data : [data]).filter(Boolean);\n    const limit = (options.hash && options.hash.limit) || Infinity;\n\n    // If collection is empty, and the helper provides an empty state, render the empty state.\n    if (items.length === 0 && options.inverse) return options.inverse(this) || '';\n\n    // Otherwise, render each item!\n    let out = '';\n    let index = 0;\n\n    for (const item of items) {\n      if (index >= limit) { break; }\n      out += options.fn(this, {\n        data: {\n          index,\n          length: items.length,\n          first: index === 0,\n          last: index === items.length - 1,\n          next: items[index + 1],\n          prev: items[index - 1],\n          record: item[DATA_SYMBOL],\n        },\n        blockParams: [item],\n      });\n      index += 1;\n    }\n    return out;\n  },\n\n  blockParam(idx, node) {\n    if (idx > 0) { return undefined; }\n    return {\n      name: node.params[0].original,\n      type: PageType.COLLECTION,\n      isPrivate: !!node.params[0].data,\n    };\n  }\n};\n\nexport default CollectionHelper;"]}