{"version":3,"file":"IfHelper.js","sourceRoot":"","sources":["../../../lib/TemplateCompiler/helpers/IfHelper.ts"],"names":[],"mappings":";;AAEA,MAAM,QAAQ,GAAmB;IAC/B,OAAO,EAAE,KAAK;IACd,QAAQ,EAAE,KAAK;IACf,OAAO,KAAK,OAAO,IAAI,CAAC,CAAC,CAAC;IAC1B,GAAG,CAAC,MAAM,EAAE,KAAK,EAAE,OAAO;QACxB,IAAI,CAAC,SAAS,EAAE,OAAO,EAAE,SAAS,CAAC,GAAG,MAAM,CAAC;QAC7C,IAAI,GAAG,SAAS,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE;YAAE,SAAS,GAAG,KAAK,CAAC;SAAE;QAC9D,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE;YAAE,OAAO,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC;SAAE;QAC/D,IAAI,SAAS,EAAE;YAAE,OAAO,OAAO,CAAC,KAAK,EAAE,CAAC;SAAE;QAC1C,IAAI,OAAO,CAAC,OAAO,EAAE;YAAE,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;SAAE;QAClD,OAAO,EAAE,CAAC;IACZ,CAAC;CACF,CAAA;AAED,kBAAe,QAAQ,CAAC","sourcesContent":["import { NeutrinoHelper } from './types';\n\nconst IfHelper: NeutrinoHelper = {\n  isField: false,\n  isBranch: false,\n  getType() { return 'if'; },\n  run(params, _hash, options) {\n    let [condition, ifValue, elseValue] = params;\n    if (`${condition}`.startsWith('data:')) { condition = false; }\n    if (!options.block) { return condition ? ifValue : elseValue; }\n    if (condition) { return options.block(); }\n    if (options.inverse) { return options.inverse(); }\n    return '';\n  }\n}\n\nexport default IfHelper;"]}