{"version":3,"file":"CollateHelper.js","sourceRoot":"","sources":["../../../lib/TemplateCompiler/helpers/CollateHelper.ts"],"names":[],"mappings":";;AAAA,mCAAqD;AAErD,yCAA6C;AAG7C,MAAM,aAAa,GAAmB;IACpC,OAAO,EAAE,KAAK;IACd,QAAQ,+BAAqB;IAC7B,OAAO,KAAK,OAAO,SAAS,CAAC,CAAC,CAAC;IAC/B,GAAG,CAAC,CAAC,UAAU,CAAC,EAAE,IAAI,GAAC,EAAE,EAAE,OAAO;;QAChC,MAAM,MAAM,GAAG,IAAI,GAAG,EAAE,CAAC;QACzB,IAAI,GAAG,GAAG,EAAE,CAAC;QACb,MAAM,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC;QAEtB,IAAI,CAAC,IAAI,EAAE;YACT,MAAM,IAAI,KAAK,CAAC,qDAAqD,CAAC,CAAC;SACxE;QAED,KAAK,MAAM,MAAM,IAAI,UAAU,EAAE;YAC/B,IAAI,KAAK,GAAG,OAAO,MAAM,CAAC,IAAI,CAAC,KAAK,UAAU,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YAC/E,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;gBAAE,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;aAAE;YAC5D,IAAI,CAAC,KAAK,CAAC,MAAM,IAAI,IAAI,CAAC,OAAO,EAAE;gBACjC,MAAM,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;aACvB;YACD,KAAK,IAAI,CAAC,IAAI,KAAK,EAAE;gBACnB,IAAI,CAAC,YAAY,kBAAU,EAAE;oBAAE,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,CAAC;iBAAE;gBAClD,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACf;SACF;QAED,KAAK,MAAM,KAAK,IAAI,MAAM,EAAE;YAC1B,GAAG,IAAI,MAAA,OAAO,CAAC,KAAK,+CAAb,OAAO,EAAS,CAAC;oBACtB,KAAK;oBACL,IAAI,EAAE,KAAK,IAAI,IAAI,CAAC,OAAO;oBAC3B,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC,kBAAW,CAAC,GAAG,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,kBAAW,CAAC,IAAI,CAAC,OAAO,CAAC;iBAClE,CAAC,CAAC,CAAC;SACL;QACD,OAAO,GAAG,CAAC;IACb,CAAC;CACF,CAAC;AAEF,kBAAe,aAAa,CAAC","sourcesContent":["import { NeutrinoHelper, SafeString } from './types';\n\nimport { toKebabCase } from '@universe/util';\nimport { PageType } from '../../Database/models';\n\nconst CollateHelper: NeutrinoHelper = {\n  isField: false,\n  isBranch: PageType.COLLECTION,\n  getType() { return 'collate'; },\n  run([collection], hash={}, options) {\n    const values = new Set();\n    let out = '';\n    const prop = hash.key;\n\n    if (!prop) {\n      throw new Error('You must provide a key to the `{{collate}}` helper.');\n    }\n\n    for (const record of collection) {\n      let value = typeof record[prop] === 'function' ? record[prop]() : record[prop];\n      if (!Array.isArray(value)) { value = value ? [value] : []; }\n      if (!value.length && hash.default) {\n        values.add(undefined);\n      }\n      for (let v of value) {\n        if (v instanceof SafeString) { v = v.toString(); }\n        values.add(v);\n      }\n    }\n\n    for (const value of values) {\n      out += options.block?.([{\n        value,\n        name: value || hash.default,\n        slug: value ? toKebabCase(`${value}`) : toKebabCase(hash.default),\n      }]);\n    }\n    return out;\n  }\n};\n\nexport default CollateHelper;\n"]}