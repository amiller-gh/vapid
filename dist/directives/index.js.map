{"version":3,"file":"index.js","sourceRoot":"","sources":["../../lib/directives/index.ts"],"names":[],"mappings":";;;;;;AAAA,4DAAoC;AAEpC,oCAAkC;AAElC,kDAAmC;AACnC,gDAAiC;AACjC,sDAAuC;AACvC,kDAAmC;AACnC,oDAAqC;AAErC,gDAAgD;AAChD,MAAM,UAAU,GAAG;IACjB,IAAI,EAAE,cAAa;IACnB,GAAG,EAAE,aAAY;IACjB,MAAM,EAAE,gBAAe;IACvB,IAAI,EAAE,cAAa;IACnB,KAAK,EAAE,eAAc;CACb,CAAC;AAUX,SAAgB,IAAI,CAAC,SAA4B,EAAE,EAAE,IAAI,GAAG,EAAE;IAE5D,mDAAmD;IACnD,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,KAAK,SAAS,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC;IAE9D,IAAI,UAAU,CAAC,IAAI,CAAC,EAAE;QACpB,OAAO,IAAI,UAAU,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;KAC3C;IAED,2DAA2D;IAC3D,IAAI,IAAI,EAAE;QAAE,cAAM,CAAC,IAAI,CAAC,mBAAmB,IAAI,0CAA0C,CAAC,CAAC;KAAE;IAE7F,sCAAsC;IACtC,OAAO,IAAI,UAAU,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;AAC3C,CAAC;AAdD,oBAcC;AAED,SAAgB,MAAM,CAAC,KAAU,EAAE,KAA6B,EAAE,IAA4B;IAC5F,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;IACpC,aAAa;IACb,MAAM,GAAG,GAAG,SAAS,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IACpC,OAAO,GAAG,EAAE,CAAC,CAAC,OAAO,GAAG,KAAK,QAAQ,CAAC,CAAC,CAAC,IAAI,oBAAU,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;AAChF,CAAC;AALD,wBAKC;AAED,SAAgB,GAAG,CAAC,IAAY;IAC9B,OAAO,UAAU,CAAC,IAAI,CAAC,CAAC;AAC1B,CAAC;AAFD,kBAEC","sourcesContent":["import Handlebars from 'handlebars';\n\nimport { Logger } from '../utils';\n\nimport TextDirective from './text';\nimport UrlDirective from './url';\nimport NumberDirective from './number';\nimport LinkDirective from './link';\nimport ImageDirective from './image';\n\n// TODO: Allow custom directives in site folder?\nconst DIRECTIVES = {\n  text: TextDirective,\n  url: UrlDirective,\n  number: NumberDirective,\n  link: LinkDirective,\n  image: ImageDirective,\n} as const;\n\n/**\n * Lookup function for available directives. Return a new instance if found.\n * Falls back to \"text\" directive if one can't be found.\n *\n * @params {Object} params - options and attributes\n * @return {Directive} - an directive instance\n */\ntype Directives = typeof DIRECTIVES;\nexport function find(params: { type?: string } = {}, meta = {}): InstanceType<Directives[keyof Directives]>  {\n\n  // If no name is given, silently fall back to text.\n  const name = params.type === undefined ? 'text' : params.type;\n\n  if (DIRECTIVES[name]) {\n    return new DIRECTIVES[name](params, meta);\n  }\n\n  // Only show warning if someone explicity enters a bad name\n  if (name) { Logger.warn(`Directive type '${name}' does not exist. Falling back to 'text'`); }\n\n  /* eslint-disable-next-line new-cap */\n  return new DIRECTIVES.text(params, meta);\n}\n\nexport function helper(value: any, attrs: Record<string, string>, meta: Record<string, string>) {\n  const directive = find(attrs, meta);\n  // @ts-ignore\n  const out = directive.render(value);\n  return () => (typeof out === 'string' ? new Handlebars.SafeString(out) : out);\n}\n\nexport function get(name: string) {\n  return DIRECTIVES[name];\n}\n"]}