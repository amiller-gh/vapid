{"version":3,"file":"index.js","sourceRoot":"","sources":["../../lib/directives/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,yDAAyD;AACzD,oCAAkC;AAElC,sDAAuC;AACvC,oDAAqC;AACrC,kDAAmC;AACnC,kDAAmC;AACnC,oDAAqC;AACrC,kDAAmC;AACnC,sDAAuC;AACvC,kDAAmC;AACnC,gDAAiC;AAEjC,gDAAgD;AAChD,MAAM,UAAU,GAAG;IACjB,MAAM,EAAE,gBAAe;IACvB,KAAK,EAAE,eAAc;IACrB,IAAI,EAAE,cAAa;IACnB,IAAI,EAAE,cAAa;IACnB,IAAI,EAAE,cAAa;IACnB,GAAG,EAAE,aAAY;IACjB,MAAM,EAAE,gBAAe;IACvB,IAAI,EAAE,cAAa;IACnB,KAAK,EAAE,eAAc;CACb,CAAC;AAUX,SAAgB,IAAI,CAAC,SAA4B,EAAE,EAAE,IAAI,GAAG,EAAE;IAE5D,mDAAmD;IACnD,IAAI,IAAI,GAAG,MAAM,CAAC,IAAI,KAAK,SAAS,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC;IAE5D,2DAA2D;IAC3D,IAAI,CAAC,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE;QAC9B,cAAM,CAAC,IAAI,CAAC,mBAAmB,IAAI,0CAA0C,CAAC,CAAC;QAC/E,IAAI,GAAG,MAAM,CAAC;KACf;IAED,OAAO,CAAC,IAAI,UAAU,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;AACrD,CAAC;AAZD,oBAYC;AAED,SAAsB,MAAM,CAAC,KAAU,EAAE,KAA6B,EAAE,IAA4B;;QAClG,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QACpC,aAAa;QACb,MAAM,GAAG,GAAG,MAAM,SAAS,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAC1C,OAAO,GAAG,EAAE,CAAC,CAAC,OAAO,GAAG,KAAK,QAAQ,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,oBAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;IAC5E,CAAC;CAAA;AALD,wBAKC","sourcesContent":["import { SafeString } from '../TemplateCompiler/helpers';\nimport { Logger } from '../utils';\n\nimport ChoiceDirective from './choice';\nimport ColorDirective from './color';\nimport DateDirective from './date';\nimport HtmlDirective from './html';\nimport ImageDirective from './image';\nimport LinkDirective from './link';\nimport NumberDirective from './number';\nimport TextDirective from './text';\nimport UrlDirective from './url';\n\n// TODO: Allow custom directives in site folder?\nconst DIRECTIVES = {\n  choice: ChoiceDirective,\n  color: ColorDirective,\n  date: DateDirective,\n  html: HtmlDirective,\n  text: TextDirective,\n  url: UrlDirective,\n  number: NumberDirective,\n  link: LinkDirective,\n  image: ImageDirective,\n} as const;\n\n/**\n * Lookup function for available directives. Return a new instance if found.\n * Falls back to \"text\" directive if one can't be found.\n *\n * @params {Object} params - options and attributes\n * @return {Directive} - an directive instance\n */\ntype Directives = typeof DIRECTIVES;\nexport function find(params: { type?: string } = {}, meta = {}): InstanceType<Directives[keyof Directives]>  {\n\n  // If no name is given, silently fall back to text.\n  let name = params.type === undefined ? 'text' : params.type;\n\n  // Only show warning if someone explicity enters a bad name\n  if (!name || !DIRECTIVES[name]) {\n    Logger.warn(`Directive type '${name}' does not exist. Falling back to 'text'`);\n    name = 'text';\n  }\n\n  return (new DIRECTIVES[name]()).init(params, meta);\n}\n\nexport async function helper(value: any, attrs: Record<string, string>, meta: Record<string, string>) {\n  const directive = find(attrs, meta);\n  // @ts-ignore\n  const out = await directive.render(value);\n  return () => (typeof out === 'string' && out) ? new SafeString(out) : out;\n}\n"]}