{"version":3,"file":"base.js","sourceRoot":"","sources":["../../lib/directives/base.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AACA,kEAAmC;AA2BnC;;;;;GAKG;AACH,SAAS,UAAU,CAAC,GAAQ;IAC1B,IAAI;QAAE,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;KAAE;IAAC,OAAO,GAAG,EAAE;QAAE,OAAO,GAAG,CAAC;KAAE;AAC7D,CAAC;AAED;;;GAGG;AACH,MAAsB,aAAa;IAAnC;QAIE,SAAI,GAAwB;YAC1B,KAAK,EAAE,EAAE;SACV,CAAC;IAkDJ,CAAC;IAhDC,IAAI,CAAC,MAAM,GAAG,EAAE,EAAE,IAAI,GAAG,EAAE;QACzB,IAAI,CAAC,IAAI,mCAAQ,IAAI,CAAC,IAAI,GAAK,IAAI,CAAE,CAAC;QAEtC,mFAAmF;QACnF,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;YACjD,MAAM,OAAO,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC;YAClC,IAAI,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,IAAI,EAAE,EAAE,GAAG,CAAC,EAAE;gBACvD,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,OAAO,CAAC;aAC7B;iBAAM,IAAI,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,EAAE,EAAE,GAAG,CAAC,EAAE;gBAC5D,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,OAAO,CAAC;aAC3B;SACF;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;OAGG;IACH,SAAS;QACP,MAAM,KAAK,GAAG,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,MAAM,CAAW,CAAC,IAAI,EAAE,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,EAAE;YAC/E,IAAI,KAAK,KAAK,SAAS,IAAI,KAAK,KAAK,KAAK,EAAE;gBAC1C,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG,KAAK,uBAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;aACxC;YACD,OAAO,IAAI,CAAC;QACd,CAAC,EAAE,EAAE,CAAC,CAAC;QAEP,OAAO,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACzB,CAAC;IAQD,OAAO,CAAC,KAAgC;QACtC,OAAO,uBAAM,CAAC,GAAG,KAAK,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC;IACpD,CAAC;IAEK,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO;;YACvC,OAAO,uBAAM,CAAC,GAAG,KAAK,EAAE,CAAC,CAAC;QAC5B,CAAC;KAAA;IAED,SAAS,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO;QACpC,OAAO,KAAK,CAAC;IACf,CAAC;CAEF;AAxDD,sCAwDC","sourcesContent":["import { Json } from '@universe/util';\nimport escape from 'lodash.escape';\n\nimport { Record } from '../Database/models/Record';\n\n/**\n * Directive Options Base Interface\n *\n * @option {string} [label] - form label\n * @option {string} [help] - help text under form field\n * @option {string} [help] - help text under form field\n * @attr {string} [placeholder=''] - input placeholder\n * @attr {boolean} [required=true] - all fields are required by default\n */\nexport interface DirectiveOptions<DirectiveType = string> {\n  default: DirectiveType;\n  label: string;\n  help: string;\n  priority: number;\n}\n\nexport interface DirectiveAttrs {\n  required: boolean,\n  placeholder: string,\n}\n\nexport type BlockRenderer = Json | { toString: () => string; };\n\n/**\n * Attempts to cast value to the correct type\n *\n * @param {string} val\n * @return {string|number|boolean}\n */\nfunction coerceType(val: any): string | number | boolean | null {\n  try { return JSON.parse(val); } catch (err) { return val; }\n}\n\n/**\n * The base class that all directives inherit from.\n * These are the crux of Vapid, allowing templates to specify input attributes and render content.\n */\nexport abstract class BaseDirective<DirectiveType = string> {\n\n  options!: DirectiveOptions<DirectiveType>;\n  attrs!: DirectiveAttrs;\n  meta: { pages: Record[] } = {\n    pages: [],\n  };\n\n  init(params = {}, meta = {}): this {\n    this.meta = { ...this.meta, ...meta };\n\n    // Separate options and attributes, discarding ones that aren't explicity specified\n    for (const [key, value] of Object.entries(params)) {\n      const coerced = coerceType(value);\n      if (Object.hasOwnProperty.call(this.options || {}, key)) {\n        this.options[key] = coerced;\n      } else if (Object.hasOwnProperty.call(this.attrs || {}, key)) {\n        this.attrs[key] = coerced;\n      }\n    }\n    return this;\n  }\n\n  /**\n   * Converts attrs object into HTML key=value attributes\n   * Typically used by the input method\n   */\n  htmlAttrs(): string {\n    const pairs = Object.entries(this.attrs).reduce<string[]>((memo, [key, value]) => {\n      if (value !== undefined && value !== false) {\n        memo.push(`${key}=\"${escape(value)}\"`);\n      }\n      return memo;\n    }, []);\n\n    return pairs.join(' ');\n  }\n\n  /**\n   * Renders an HTML text input\n   * Typically used in the dashboard forms, or front-end contact forms\n   */\n  abstract input(name: string, value: DirectiveType): string;\n\n  preview(value: DirectiveType | undefined): string {\n    return escape(`${value || this.options.default}`);\n  }\n\n  async render(value = this.options.default): Promise<string | BlockRenderer> {\n    return escape(`${value}`);\n  }\n\n  serialize(value = this.options.default): DirectiveType {\n    return value;\n  }\n\n}\n"]}