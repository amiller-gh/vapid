{"version":3,"file":"index.js","sourceRoot":"","sources":["../../lib/Database/index.ts"],"names":[],"mappings":"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","sourcesContent":["import {Â EventEmitter } from 'events';\nimport * as path from 'path';\nimport * as glob from 'glob';\nimport * as assert from 'assert';\n\nimport { TemplateCompiler } from '../TemplateCompiler';\nimport { ITemplate, Template } from './models/Template';\nimport { IProvider } from './providers';\n\nconst vapidCompiler = new TemplateCompiler();\n\n/**\n * Crawls templates, and creates object representing the data model\n *\n * @param {array} templates - array of file paths\n * @return {Object} template tree\n */\nfunction parse(): Record<string, ITemplate> {\n  const tree: Record<string, ITemplate> = {};\n  const templates = glob.sync(path.resolve(process.env.TEMPLATES_PATH, '**/*.html'));\n  for (const tpl of templates) {\n    const parsed = vapidCompiler.parseFile(tpl).data;\n    for (const [parsedName, parsedTemplate] of Object.entries(parsed)) {\n      // We merge discovered fields across files, so we gradually collect configurations\n      // for all sections here. Get or create this shared object as needed.\n      const finalTemplate: ITemplate = tree[parsedName] = tree[parsedName] || {\n        sortable: false,\n        type: null,\n        name: null,\n        options: {},\n        fields: {},\n      };\n\n      // Ensure the section name and type are set.\n      finalTemplate.name = finalTemplate.name || parsedTemplate.name;\n      finalTemplate.type = finalTemplate.type || parsedTemplate.type;\n\n      // Merge section options\n      Object.assign(finalTemplate.options, parsedTemplate.options);\n\n      // For every field discovered in the content block, track them in the section.\n      for (const [, field] of Object.entries(parsedTemplate.fields)) {\n        const old = finalTemplate.fields[field.key];\n        finalTemplate.fields[field.key] = {\n          // Merge with previous values if this field has been seen already.\n          ...(old || {}),\n          // Default to `type: text` if not specified.\n          type: field.type || 'text',\n          priority: field.priority || 0,\n          label: field.label || '',\n          key: field.key,\n          options: { ...(old.options || {}), ...field.options },\n        };\n        // console.log(section.fields[fieldAttrs.key]);\n      }\n    }\n  }\n\n  return tree;\n}\n\n/**\n * Helps keep the database data structure in sync with the site templates\n */\nexport default class Database extends EventEmitter {\n  private previous: Record<string, ITemplate> | null = null;\n  private provider: IProvider;\n\n  constructor(provider: IProvider) {\n    super();\n    this.provider = provider;\n  }\n\n  async start() { await this.provider.start(); }\n  async stop() { await this.provider.stop(); }\n\n  /**\n   * Parses templates and updates the database\n   */\n  async rebuild() {\n\n    if (!this.previous) {\n      const templates = await this.provider.getAllTemplates();\n      this.previous = templates.reduce<Record<string, Template>>((memo, template) => {\n        memo[Template.identifier(template)] = template;\n        return memo;\n      }, {});\n    }\n\n    const tree = parse();\n\n    // For every template file\n    let existing: Promise<Template>[] = [];\n    for (let template of Object.values(tree)) {\n      existing.push(this.provider.updateTemplate(template));\n    }\n\n    await Promise.all(existing);\n\n    this.previous = tree;\n\n    this.emit('rebuild');\n  }\n\n  /**\n   * Determines if tree has changed since last build\n   *\n   * @todo Cache so this isn't as taxing on the load time\n   */\n  isDirty() {\n    // TODO: Should remove _permalink and other special fields\n    try {\n      assert.deepStrictEqual(parse(), this.previous);\n      return false;\n    } catch (_err) {\n      return true;\n    }\n  }\n}\n"]}