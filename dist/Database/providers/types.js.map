{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../lib/Database/providers/types.ts"],"names":[],"mappings":";;;;;;;;;;;;AAEA,MAAsB,SAAS;IAE7B,YAAY,MAAc;QACxB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAIK,QAAQ;;YACZ,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,OAAO,oBAAgB,CAAC;YACtE,IAAI,CAAC,QAAQ,EAAE;gBAAE,OAAO,IAAI,CAAC;aAAE;YAC/B,OAAO,CAAC,MAAM,IAAI,CAAC,sBAAsB,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC;QACrE,CAAC;KAAA;IAEK,UAAU;;YACd,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,SAAS,4BAAoB,CAAC;YAC5E,IAAI,CAAC,QAAQ,EAAE;gBAAE,OAAO,IAAI,CAAC;aAAE;YAC/B,OAAO,CAAC,MAAM,IAAI,CAAC,sBAAsB,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC;QACrE,CAAC;KAAA;CAiBF;AAnCD,8BAmCC","sourcesContent":["import { Collection, Template, ITemplate, PageType, IRecord, Record  } from '../models';\n\nexport abstract class IProvider<Config = any> {\n  config: Config;\n  constructor(config: Config) {\n    this.config = config;\n  }\n  abstract start(): Promise<void>;\n  abstract stop(): Promise<void>;\n\n  async getIndex(): Promise<Record | null> {\n    const template = await this.getTemplateByName('index', PageType.PAGE);\n    if (!template) { return null; }\n    return (await this.getRecordsByTemplateId(template.id))[0] || null;\n  }\n\n  async getGeneral(): Promise<Record | null> {\n    const template = await this.getTemplateByName('general', PageType.SETTINGS);\n    if (!template) { return null; }\n    return (await this.getRecordsByTemplateId(template.id))[0] || null;\n  }\n\n  abstract getAllTemplates(): Promise<Template[]>;\n  abstract getAllRecords(): Promise<Record[]>;\n  abstract getCollectionByName(name: string): Promise<Collection | null>;\n\n  abstract getTemplateById(id: number): Promise<Template | null>;\n  abstract getTemplateByName(name: string, type: PageType): Promise<Template | null>;\n  abstract getTemplatesByType(type: PageType): Promise<Template[]>;\n\n  abstract getRecordById(id: number): Promise<Record | null>;\n  abstract getRecordBySlug(slug: string): Promise<Record | null>;\n  abstract getRecordsByTemplateId(id: number): Promise<Record[]>;\n  abstract getRecordsByType(type: PageType): Promise<Record[]>;\n\n  abstract updateTemplate(template: ITemplate): Promise<Template>;\n  abstract updateRecord(record: IRecord): Promise<Record>;\n}\n"]}