{"version":3,"file":"MemoryProvider.js","sourceRoot":"","sources":["../../../lib/Database/providers/MemoryProvider.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from 'fs';\n\nimport { PageType, ITemplate, Template, IRecord, Record as DBRecord  } from '../models';\nimport { IProvider } from './types';\n\nlet AUTO_INCREMENT = 2;\nconst getNextId = () => AUTO_INCREMENT++;\n\nexport interface MemoryProviderConfig {\n  path?: string;\n}\n\ninterface SerializedMemoryProvider {\n  records: IRecord[];\n  templates: ITemplate[]\n}\n\nexport default class MemoryProvider extends IProvider<MemoryProviderConfig> {\n\n  #records: Map<number, DBRecord> = new Map();\n  #templates: Map<number, Template> = new Map();\n\n  async start() {\n    console.info('Starting Memory Provider');\n    if (this.config.path) {\n      try {\n        const data = JSON.parse(fs.readFileSync(this.config.path, 'utf8')) as SerializedMemoryProvider;\n        for (const template of data.templates) {\n          this.#templates.set(template.id || getNextId(), new Template(template));\n        }\n        for (const record of data.records) {\n          const template = await this.getTemplateById(record.templateId);\n          template && this.#records.set(record.id, new DBRecord(record, template));\n        }\n      } catch { }\n    }\n  }\n\n  async stop() {\n    console.info('Stopping Memory Provider');\n    if (this.config.path) {\n      const data: SerializedMemoryProvider = {\n        templates: [...this.#templates.values()],\n        records: [...this.#records.values()],\n      }\n      fs.writeFileSync(this.config.path, JSON.stringify(data, null, 2));\n    }\n  }\n\n  log(): void {\n    console.log({\n      templates: [...this.#templates.values()],\n      records: [...this.#records.values()],\n    });\n  }\n\n  async getAllTemplates(): Promise<Template[]> {\n    return [...this.#templates.values()];\n  }\n\n  async getAllRecords(): Promise<DBRecord[]> {\n    return [...this.#records.values()];\n  }\n\n  async getTemplateById(id: number): Promise<Template | null> {\n    return this.#templates.get(id) || null;\n  }\n\n  async getTemplateByName(name: string, type: PageType): Promise<Template | null> {\n    for (const [_, template] of this.#templates) {\n      if (template.name === name && template.type === type) {\n        return template;\n      }\n    }\n    return null;\n  }\n\n  async getTemplatesByType(type: PageType): Promise<Template[]> {\n    const res: Template[] = [];\n    for (const [_, template] of this.#templates) {\n      if (template && template.type === type) {\n        res.push(template);\n      }\n    }\n    return res;\n  }\n\n  async getRecordById(id: number): Promise<DBRecord | null> {\n    const record = this.#records.get(id) || null;\n    return record;\n  }\n\n  async getRecordBySlug(slug: string): Promise<DBRecord | null> {\n    for (const [_, record] of this.#records) {\n      if (record.slug === slug || (slug === '' && record.slug === 'index')) {\n        return record;\n      }\n    }\n    return null;\n  }\n\n  async getRecordsByTemplateId(id: number): Promise<DBRecord[]> {\n    const res: DBRecord[] = [];\n    for (const [_, record] of this.#records) {\n      if (record.templateId === id) {\n        res.push(record);\n      }\n    }\n    return res;\n  }\n\n  async getRecordsByType(type: PageType): Promise<DBRecord[]> {\n    const res: DBRecord[] = [];\n    for (const [_, record] of this.#records) {\n      const template = this.#templates.get(record.templateId);\n      if (template && template.type === type) {\n        res.push(record);\n      }\n    }\n    return res;\n  }\n\n  async getChildren(id: number): Promise<DBRecord[]> {\n    const res: DBRecord[] = [];\n    for (const [_, record] of this.#records) {\n      if (record && record.parentId === id) {\n        res.push(record);\n      }\n    }\n    return res;\n  }\n\n  /**\n   * Update a section's attributes\n   * Primarily used by the Vapid module when rebuilding the site\n   */\n  async updateTemplate(update: ITemplate): Promise<Template> {\n    const old = await this.getTemplateByName(update.name, update.type) || null;\n    const template = new Template(update);\n    template.id = old?.id || update.id || getNextId();\n    this.#templates.set(template.id, template);\n    return template;\n  }\n\n  /**\n   * Update a section's attributes\n   * Primarily used by the Vapid module when rebuilding the site\n   */\n  async updateRecord(update: IRecord): Promise<DBRecord> {\n    const old = await this.getRecordById(update.id) || null;\n    const template = await this.getTemplateById(update.templateId);\n    if (!template) { throw new Error(`Error creating record. Unknown template id ${update.templateId}`); }\n    const record = new DBRecord(update, template);\n    record.id = old?.id || update.id || getNextId();\n    console.log(old, update, record);\n    record.updatedAt = Date.now();\n    record.createdAt = record.createdAt || Date.now();\n    this.#records.set(record.id, record);\n    return record;\n  }\n\n  async deleteTemplate(templateId: number): Promise<void> {\n    this.#templates.delete(templateId);\n  }\n\n  async deleteRecord(recordId: number): Promise<void> {\n    this.#records.delete(recordId);\n  }\n}\n"]}